---
title: "tratamento_artigo3"
format: html
---

## Tratamento de dados

Carregando as bibliotecas necessárias.

```{r}
#| message: false
#| warning: false

options(scipen = 999)

library(tidyverse)
library(RODBC)
library(geojsonio)
library(geojsonsf)
library(geobr)
library(scales)
library(ggspatial) 
library(sf)
library(rlang)
library(readxl)
library(quantreg)
library(lmtest)

```

## 1. Carregamento de dados

Os passos abaixos descrevem a organização dos dados do banco de dados que servirá para rodar as análises inferenciais.

### 1.1. Variável resposta - gap de cirurgiões dentistas

A variável resposta é o gap de CD. Mas vamos acessar os modelos referentes ao cenário

```{r}

cenarios_regioes <- 
  read_excel("~/GitHub/saude_bucal/09_artigo3_tratamento/cenarios_regioes.xlsx") 

m1 <- cenarios_regioes |> 
        filter(cenario == 'cenario 4' & 
               nivel == "APS") |> 
        mutate(rr_1 = rr) |> 
        select(cod_regsaud, regiao_saude, rr_1)

m2 <- cenarios_regioes |> 
        filter(cenario == 'cenario 4' & 
               nivel == "AES") |> 
        mutate(rr_2 = rr) |> 
        select(cod_regsaud, rr_2)

m3 <- cenarios_regioes |> 
        filter(cenario == 'cenario 3' & 
               nivel == "AES") |> 
        mutate(rr_3 = rr) |> 
        select(cod_regsaud, rr_3)

base_completa <- 
  m1 |> 
  left_join(m2, by = c("cod_regsaud"="cod_regsaud")) |> 
  left_join(m3, by = c("cod_regsaud"="cod_regsaud"))


```

### 1.2. Instituições de Ensino Superior

O próximo passo consiste em acessar o total de vagas de cursos de odontologia por região de saúde.

#### 1.2.1. Quantidade de vagas e matrículas em cursos de odontologia

Acessando os dados de matrículas, vagas e concluintes.

```{r}

# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@daniel"."ies_odonto"'



ies_odonto <- sqlQuery(channel, query, 
                     as.is = TRUE) 

ies_odonto$total_ingresso <- as.numeric(ies_odonto$total_ingresso)

ies_odonto$total_matriculas <- as.numeric(ies_odonto$total_matriculas)

ies_odonto$inscritos_total <- as.numeric(ies_odonto$inscritos_total)

ies_odonto$concluintes_total <- as.numeric(ies_odonto$concluintes_total)

ies_odonto$vaga_total <- as.numeric(ies_odonto$vaga_total)


```

Tratamento de IES para extrair alguns atributos.

```{r}

ies_tratado <- 
  ies_odonto |> 
  filter(tp_categoria_administrativa != "Especial") |> 
  mutate(categoria = if_else(
                      tp_categoria_administrativa == "Privada com fins lucrativos" |
                      tp_categoria_administrativa == "Privada sem fins lucrativos", "Privada", "Publico"
                      
  )) |> 
  group_by(ano, uf_sigla, regiao_saude, 
           cod_regsaud, categoria) |> 
  summarise(vagas = sum(vaga_total),
            matriculas = sum(total_matriculas)) |> 
    pivot_wider(
    id_cols = c(ano, uf_sigla, regiao_saude, cod_regsaud),
    names_from = categoria,
    values_from = c(vagas, matriculas),
    names_glue = "{.value}_{categoria}"
  ) |> 
  mutate(across(starts_with("vagas"), ~replace_na(.,0)),
         across(starts_with("matriculas"), ~replace_na(.,0))) |> 
  mutate(vagas_total = vagas_Privada + vagas_Publico, 
         .after = vagas_Publico) |> 
  mutate(matriculas_total = matriculas_Privada + matriculas_Publico, 
         .after = matriculas_Publico)

```

Vamos acessar a média de matrículas do últimos cinco anos. Em sequência, vamos juntar com a base

```{r}

media_matriculas <- 
  ies_tratado |> 
  filter(ano > 2016) |> 
  group_by(cod_regsaud) |> 
  summarise(matriculas = mean(matriculas_total)) |> 
  mutate(cod_regsaud = as.numeric(cod_regsaud))

base_completa <- 
  base_completa |> 
  left_join(media_matriculas, 
            by = c("cod_regsaud"="cod_regsaud")) |> 
  mutate(across(starts_with("matriculas"), 
                ~replace_na(.,0)))

```

#### 1.1.2. Taxa de crescimento de vagas e matrículas de odontologia em IES

A taxa de crescimento foi calculada de acordo com o seguinte bloco de código. Calculamos o crescimento de vagas e matrículas em um período de cinco anos, entre 2017 e 2022. Nem todas as regiões de saúde tiveram registro de profissionais em formação.

Obs.: Talvez a gente não use esta variável.

```{r}

crescimento_ies <- 
  ies_tratado |> 
  filter(ano == 2017 | ano == 2022) |> 
  ungroup() |> 
  group_by(ano, uf_sigla, 
           cod_regsaud,
           regiao_saude) |> 
  summarise(vagas = sum(vagas_total),
            matriculas = sum(matriculas_total)) |> 
  pivot_wider(
    id_cols = c(uf_sigla, 
                regiao_saude, 
                cod_regsaud),
    names_from = ano,
    values_from = c(vagas, matriculas),
    names_glue = "{.value}_{ano}"
  ) |> 
  mutate(across(starts_with("vagas"), 
                ~replace_na(.,1)),
         across(starts_with("matriculas"), 
                ~replace_na(.,1))) |> 
  mutate(crescimento_vagas = (vagas_2022 * 100/vagas_2017) - 100, 
         .after = vagas_2022) |> 
  mutate(crescimento_matriculas = 
           (matriculas_2022 * 100/matriculas_2017) - 100, 
         .after = matriculas_2022)


```

O mapa abaixo mostra um mapa contendo o indicador em questão. Cerca de 232 regiões de saúde apresentaram o valor zero devido à ausência de IES e vagas nestas localidades.

```{r}
#| message: false
#| warning: false

estados_br <- read_state(year = 2020,
                         showProgress = FALSE)

spdf <- 
  geojson_read("~/GitHub/saude_bucal/01_dados/shape_file_regioes_saude.json", 
               what = "sp") 

spdf_fortified <- 
  sf::st_as_sf(spdf) |> 
  sf::st_set_crs(4326) |> 
  unique()

# Definir limites de longitude e latitude para focar no Brasil
limite_long <- c(-75, -28)  # limites de longitude
limite_lat <- c(-33, 4)     # limites de latitude

spdf_fortified$reg_id <- as.character(spdf_fortified$reg_id)

baseline <- 
  spdf_fortified |> 
  left_join(crescimento_ies, 
            by = c("reg_id"="cod_regsaud")) |> 
  mutate(across(starts_with("crescimento"), 
                ~replace_na(.,0))) |> 
  mutate(crescimento_matriculas = 
           round(crescimento_matriculas, 2)) |> 
  mutate(crescimento_matriculas = 
           if_else(crescimento_matriculas > 150, 
                   150, crescimento_matriculas)) 
  

if (!"geometry" %in% names(baseline)) {
  
  baseline <- st_as_sf(baseline, 
                       coords = c("longitude", 
                                  "latitude"), 
                       crs = 4326) 
}

```

Criando a função gerar mapa para visualizar mapas.

```{r}

gerar_mapa <- function(variavel, 
                       texto_lab,
                       texto_titulo){
  
  variavel_sym <- sym(variavel) 
  
  baseline |> 
    ggplot() +
    geom_sf(aes(fill = !!variavel_sym, 
                geometry = geometry)) +
    geom_sf(data = estados_br, 
            fill = NA, 
            color = "#4c4d4a", 
            size = 0.1) + 
    geom_sf(data = baseline |> 
              filter(!!variavel_sym == 0), 
            fill = "white", 
            color = "black", 
            size = 0.2) +
    scale_fill_gradientn(colors = c("#D92B3A", 
                                    "#d4e302",
                                    "#02592e")) + 
    theme_minimal() +
    labs(fill = texto_lab) +
    ggtitle(texto_titulo) +
    annotation_north_arrow(location = "tr",  
                           which_north = "true",
                           style = north_arrow_fancy_orienteering()) +
    annotation_scale(location = "bl", 
                     width_hint = 0.3) +
    theme(
      legend.justification = "center",
      legend.box = "horizontal",
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.x = element_text(size = 14),  
      axis.text.y = element_text(size = 14),
      legend.text = element_text(size = 14),
      plot.title = element_text(size = 14),
      panel.border = element_rect(color = "black", 
                                  fill = NA, 
                                  size = 1), 
      plot.margin = margin(10, 10, 
                           10, 10)) 
}

gerar_mapa("crescimento_matriculas",
           "Crescimento de matrículas",
           "Crescimento de matrículas em IES entre 2017 e 2022")


```

### 1.2. Retenção

A seguir serão acessados dados de retenção de profissionais pelas regiões de saúde.

```{r}


query_retencao <- 'SELECT * FROM Dados.retencao."Cirurgiões-dentistas_retencao_geral.parquet"'


retencao <- sqlQuery(channel,
                     query_retencao, 
                     as.is = TRUE) 


retencao$regiao_saude <- as.numeric(retencao$regiao_saude)

base_completa <- base_completa |> 
                    left_join(retencao, 
                         by = c("cod_regsaud"="regiao_saude"))

```

Visualizando o resultado da retenção.

```{r}

gerar_mapa("retencao_geral",
           "Retenção (%)",
           "Taxa de retenção de cirurgiões-dentistas")

```

### 1.3. Equipamentos de Odontologia

Visualizando os dados de retenção.

```{r}

query <- 'SELECT * FROM 
          "@daniel"."equipamentos_odontologia_regiao_saude"'


equip_odonto <- sqlQuery(channel, 
                         query, 
                         as.is = TRUE) 

equip_odonto$equip_nao_sus <- as.numeric(equip_odonto$equip_nao_sus)

equip_odonto$equip_sus <- as.numeric(equip_odonto$equip_sus)

```

```{r}

equip <- 
  equip_odonto |>
  mutate(equip = equip_sus + equip_nao_sus) |> 
  filter(ano > 2016) |> 
  group_by(cod_regsaud) |> 
  summarise(equip = mean(equip)) |> 
  mutate(cod_regsaud = as.numeric(cod_regsaud))

base_completa <- 
  base_completa |> 
  left_join(equip, by = c("cod_regsaud"))


```

Crescimento de equipamentos do SUS.

```{r}

equip_odonto$equip_sus <- as.numeric(equip_odonto$equip_sus)
equip_odonto$equip_nao_sus <- as.numeric(equip_odonto$equip_nao_sus)

crescimento_equip_odonto <- 
  equip_odonto |> 
  filter(equipamento == "Equipamento odontológico completo") |> 
  filter(ano == 2010 | ano == 2024) |> 
  group_by(ano, uf_sigla, cod_regsaud,
           regiao_saude) |> 
  summarise(equip_sus = sum(equip_sus),
            equip_nao_sus = sum(equip_nao_sus)) |> 
  pivot_wider(
    id_cols = c(uf_sigla, regiao_saude, cod_regsaud),
    names_from = ano,
    values_from = c(equip_sus, equip_nao_sus),
    names_glue = "{.value}_{ano}"
  ) |> 
  mutate(across(starts_with("equip_sus"), ~replace_na(.,1)),
         across(starts_with("equip_nao_sus"), ~replace_na(.,1))) |> 
  mutate(crescimento_equip_sus = 
           (equip_sus_2024 * 100/equip_sus_2010) - 100, 
         .after = equip_sus_2024) |> 
  mutate(crescimento_equip_nsus = 
           (equip_nao_sus_2024 * 100/equip_nao_sus_2010) - 100, 
         .after = equip_nao_sus_2024) |>
  ungroup() |> 
  select(-uf_sigla, -regiao_saude)


```

Gerando o mapa

```{r}

gerar_mapa("crescimento_equip_sus",
           "Crescimento equipamentos SUS",
           "Crescimento equipamentos SUS")

```

```{r}

gerar_mapa("crescimento_equip_nsus",
           "Crescimento equipamentos Não SUS",
           "Crescimento equipamentos Não SUS")

```

### 1.4. CEO

Quantidade de vínculos de profissionais de odonto -

```{r}

query_ceo <- 'SELECT * FROM "@daniel".CEO'

ceo <- sqlQuery(channel, query_ceo, 
                     as.is = TRUE) 

ceo$ANO <- as.numeric(ceo$ANO)
ceo$total <- as.numeric(ceo$total)

ceo_regioes_var <- 
            ceo |> 
            filter(ANO == 2019 | ANO == 2024) |> 
            group_by(ANO, uf, cod_regsaud,
                     regiao_saude) |> 
            summarise(ceo = sum(total)) |> 
            pivot_wider(
              id_cols = c(uf, regiao_saude, cod_regsaud),
              names_from = ANO,
              values_from = ceo,
              names_glue = "{.value}_{ANO}"
            ) |> 
            mutate(across(starts_with("ceo"), 
                          ~replace_na(.,0))) |> 
            mutate(crescimento_ceo = 
                     (ceo_2024 * 100/ceo_2019) - 100, 
                   .after = ceo_2024) |> 
            ungroup() |> 
            select(-uf, -regiao_saude)


ceo_media <- ceo |> 
            filter(ANO > 2019) |> 
            group_by(cod_regsaud) |> 
            summarise(ceo = mean(total)) |> 
            mutate(cod_regsaud = as.numeric(cod_regsaud))

```

```{r}

base_completa <- 
  base_completa |> 
  left_join(ceo_media, 
            by = c("cod_regsaud"="cod_regsaud")) |> 
  mutate(across(starts_with("ceo"), 
                          ~replace_na(.,0)))


```

### 1.5. PIB per capita

Esta subseção é focada no levantamento de PIB per capita por região de saúde.

```{r}
#| message: false
#| warning: false

pib <- 
  read_excel("~/GitHub/saude_bucal/09_artigo3_tratamento/pib.xlsx") |>   
  filter(ano == 2021)
  
hierarquia <- 
  read_csv("C:/Users/Lapei_Cigets/OneDrive/Documents/GitHub/saude_bucal/01_dados/hierarquia_atualizada.csv") |> 
  select(cod_regsaud, regiao_saude, 
         cod_municipio, cod_municipiodv)

pib <- pib |> 
  left_join(hierarquia, 
            by = c("cod_ibge"="cod_municipiodv"))

pop_21_rs <- 
  read_excel("~/GitHub/saude_bucal/09_artigo3_tratamento/pop_21.xls", 
             col_types = c("text", "numeric", "text", 
                           "numeric", "text", "numeric")) |> 
  left_join(hierarquia,
            by = c("ibge"="cod_municipiodv")) |> 
  group_by(cod_regsaud) |> 
  summarise(pop = sum(pop))


pibpercapita_rs <- 
  pib |> 
  group_by(cod_regsaud) |> 
  summarise(pib = sum(PIB_1000)) |> 
  left_join(pop_21_rs, by = c("cod_regsaud"="cod_regsaud")) |> 
  mutate(pibpc_rs = pib * 1000/pop) |> 
  mutate(cod_regsaud = as.numeric(cod_regsaud))


base_completa <- base_completa |> 
  left_join(pibpercapita_rs,
            by = c("cod_regsaud"="cod_regsaud"))


```

### 1.6. Vínculos

quantidade vínculos de profissionais de odonto em diferentes tipos de estabelecimento (público e privado)

## 2. Modelagem

```{r}

base_completa <- 
  base_completa |> 
  mutate(equip_pop = equip/pop,
         ceo_pop = ceo/pop) |> 
  mutate(retencao_geral = retencao_geral * 100) |> 
  mutate(r1_log = log(rr_1),
         r2_log = log(rr_2),
         r3_log = log(rr_3))

```

R1

```{r}
#| message: false
#| warning: false

# R1 APS

base_completa |> 
  select(rr_1, matriculas, retencao_geral, 
         equip_pop, ceo_pop, pibpc_rs) |> 
  GGally::ggpairs()
  

```

R2

```{r}

base_completa |> 
  select(rr_2, matriculas, retencao_geral, 
         equip_pop, ceo, pibpc_rs) |> 
  GGally::ggpairs()
```

```{r}

base_completa |> 
  select(rr_3, matriculas, retencao_geral, 
        equip_pop, ceo, pibpc_rs) |> 
  GGally::ggpairs()


```

```{r}

modelo_multiplo <- 
  lm("rr_2 ~ retencao_geral + pibpc_rs + 
             matriculas + equip", 
     data = base_completa)

modelo_quanti <- 
  rq("rr_2 ~ retencao_geral + pibpc_rs + 
             matriculas + equip", 
     tau = c(0.25, 0.5, 0.75), 
     data = base_completa)

summary(modelo_multiplo, 
        se = "boot", 
        rho = TRUE)

bptest(modelo_multiplo)



```

```{r}


modelo_robusto <- coeftest(modelo_multiplo, vcov = vcovHC(modelo_multiplo, type = "HC3"))

modelo_ponderado <- lm("rr_2 ~ retencao_geral + pibpc_rs + 
                        matriculas + equip", 
                       data = base_completa, 
                       weights = 1 / (residuals(modelo_multiplo)^2))

# Verificar novamente heterocedasticidade
bptest(modelo_ponderado)

summary(modelo_ponderado)

```
